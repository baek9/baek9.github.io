<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Integer Overflow on code(evening);</title>
    <link>http://baek9.github.io/tags/integer-overflow/</link>
    <description>Recent content in Integer Overflow on code(evening);</description>
    <image>
      <url>http://baek9.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://baek9.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Apr 2018 22:14:52 +0000</lastBuildDate><atom:link href="http://baek9.github.io/tags/integer-overflow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Integer Overflow in V8</title>
      <link>http://baek9.github.io/posts/2018-04-02-integer_overflow_in_regexp_of_v8/</link>
      <pubDate>Mon, 02 Apr 2018 22:14:52 +0000</pubDate>
      
      <guid>http://baek9.github.io/posts/2018-04-02-integer_overflow_in_regexp_of_v8/</guid>
      <description>최근 취약점들을 살펴보면 순수하게 V8과 관련된 취약점은 별로 없고, 그나마 JavaScript로 시작하되 최종적으로는 Blink나 Chrome에서 취약점이 발생하는 경우들이 많은 것 같다. 와중에 최근에 등록된 버그가 눈길을 끌었다. V8 내부에서 정수 오버플로우(Integer Overflow)를 유발하는 PoC(Proof of Concept)를 제시하고 있었다. 대략적인 V8의 구조와 정수 오버플로우가 어떤 것인지 알게된 의미있는 분석이었다.
RegExp.prototype[@@replace] 해당 PoC는 결국에 C++ 함수인 Runtime_RegExpReplace()에서 발현된다.(이하 RegExpReplace) 이 함수는 자바스크립트 레벨에서 RegExp.prototype[@@replace] 메소드(이하 replace)에 대응되는 함수이다. RegExp는 무엇일까? 정규표현식을 표현하고 처리하기 위한 객체로 이해하면 된다.</description>
    </item>
    
  </channel>
</rss>
